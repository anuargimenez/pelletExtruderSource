/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "initialConditions"		//Einbinden des "initialConditions"-File um Variablen zugänglich zu machen

dimensions      [0 0 0 1 0 0 0];

internalField   uniform $T_initial;		//Definiert in 0/initialConditions

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform $T_Filament;	//Definiert in 0/initialConditions
    }
    
    outlet
    {
        type            zeroGradient;
    }

    wall_top
    {
        type            	convectiveRadiativeHeatFlux;
        mode            	convectiveRadiative;
        Ta              	constant $T_Nozzle;		//Definiert in 0/initialConditions
        h               	uniform 165.0;			//Wärmeübergangskoeffizient    [W/(m²*K)]
	emissivityNozzle	0.95;				//Emissionskoeffizient Düse (bzw. Messing) [-]
	emissivityFilament	0.95;				//Emissionskoeffizient Filament [-]
	dNozzle			2.0;				//Innendurchmesser Düse [mm}
	dFilament		1.65;				//Durchmesser Filament [mm]
        kappaMethod     	fluidThermo;
        value           	$internalField;			//initial Temperature value
    }

    wall_middle
    {
        type            fixedValue;
        value           uniform $T_Nozzle;		//Definiert in 0/initialConditions
    }

    wall_bottom
    {
        type            fixedValue;
        value           uniform $T_Nozzle;		//Definiert in 0/initialConditions
    }
    front_top
    {
        type            wedge;
    }

    front_middle
    {
        type            wedge;
    }

    front_bottom
    {
        type            wedge;
    }

    back_top
    {
        type            wedge;
    }

    back_middle
    {
        type            wedge;
    }
    back_bottom
    {
        type            wedge;
    }
    axis_top
    {
        type            symmetryPlane;
    }
    axis_middle
    {
        type            symmetryPlane;
    }
    axis_bottom
    {
        type            symmetryPlane;
    }
}


// ************************************************************************* //

